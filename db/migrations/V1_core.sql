-- Active: 1758301668582@@127.0.0.1@1521@xepdb1@MCTUNES
-- Run the CREATE USER block once as SYS (or another DBA), then comment it out
-- so the file is re-runnable.
-- CREATE USER mctunes IDENTIFIED BY "change_me" DEFAULT TABLESPACE USERS QUOTA UNLIMITED ON USERS;
-- GRANT CONNECT, RESOURCE TO mctunes;
-- ALTER USER mctunes QUOTA UNLIMITED ON USERS;

-- ALTER SESSION SET CURRENT_SCHEMA = mctunes;

-- Lookup tables (enum strategy = lookup, flexible & queryable)
CREATE TABLE moods (
  id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  code         VARCHAR2(40) UNIQUE NOT NULL,
  display_name VARCHAR2(80) NOT NULL
);

CREATE TABLE activities (
  id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name         VARCHAR2(80) UNIQUE NOT NULL,
  description  VARCHAR2(255),
  is_default   NUMBER(1) DEFAULT 1 CHECK (is_default IN (0,1))
);

CREATE TABLE genres (
  id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name  VARCHAR2(100) UNIQUE NOT NULL
);

-- Core entities
CREATE TABLE users (
  id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email          VARCHAR2(255) NOT NULL UNIQUE,
  password_hash  VARCHAR2(255) NOT NULL,
  display_name   VARCHAR2(120),
  created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at     TIMESTAMP,
  is_active      NUMBER(1) DEFAULT 1 CHECK (is_active IN (0,1))
);

CREATE TABLE songs (
  id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title           VARCHAR2(255) NOT NULL,
  artist          VARCHAR2(255) NOT NULL,
  album           VARCHAR2(255),
  release_year    NUMBER(4),
  genre_id        NUMBER REFERENCES genres(id),
  tempo_bpm       NUMBER(6,2),
  energy          NUMBER(3,2) CHECK (energy BETWEEN 0 AND 1),
  valence         NUMBER(3,2) CHECK (valence BETWEEN 0 AND 1),
  danceability    NUMBER(3,2) CHECK (danceability BETWEEN 0 AND 1),
  default_mood_id NUMBER REFERENCES moods(id),
  created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_songs_artist ON songs(artist);
CREATE INDEX idx_songs_genre  ON songs(genre_id);
CREATE INDEX idx_songs_mood   ON songs(default_mood_id);

CREATE TABLE ratings (
  id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id      NUMBER NOT NULL REFERENCES users(id),
  song_id      NUMBER NOT NULL REFERENCES songs(id),
  rating_value NUMBER NOT NULL CHECK (rating_value BETWEEN 1 AND 5),
  rated_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT uq_ratings_user_song UNIQUE (user_id, song_id)
);
CREATE INDEX idx_ratings_song ON ratings(song_id);
CREATE INDEX idx_ratings_time ON ratings(rated_at);

CREATE TABLE listening_history (
  id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id     NUMBER NOT NULL REFERENCES users(id),
  song_id     NUMBER NOT NULL REFERENCES songs(id),
  played_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  source      VARCHAR2(40),
  mood_id     NUMBER REFERENCES moods(id),
  activity_id NUMBER REFERENCES activities(id)
);
CREATE INDEX idx_lh_user_time ON listening_history(user_id, played_at);
CREATE INDEX idx_lh_song_time ON listening_history(song_id, played_at);
CREATE INDEX idx_lh_activity  ON listening_history(activity_id);
CREATE INDEX idx_lh_mood      ON listening_history(mood_id);

CREATE TABLE user_context (
  id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id     NUMBER NOT NULL UNIQUE REFERENCES users(id),
  mood_id     NUMBER REFERENCES moods(id),
  activity_id NUMBER REFERENCES activities(id),
  updated_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE recommendation_events (
  id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id       NUMBER NOT NULL REFERENCES users(id),
  song_id       NUMBER NOT NULL REFERENCES songs(id),
  algo_version  VARCHAR2(40),
  explanation   VARCHAR2(500),
  rank_position NUMBER,
  served_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_re_user_time ON recommendation_events(user_id, served_at);

CREATE TABLE revoked_tokens (
  id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id    NUMBER NOT NULL REFERENCES users(id),
  jti        VARCHAR2(128) NOT NULL UNIQUE,
  revoked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  expires_at TIMESTAMP
);

-- Derived/aggregates
CREATE TABLE song_aggregates (
  song_id       NUMBER PRIMARY KEY REFERENCES songs(id) ON DELETE CASCADE,
  rating_count  NUMBER DEFAULT 0,
  rating_avg    NUMBER(4,3) DEFAULT 0.000,
  last_rated_at TIMESTAMP
);
